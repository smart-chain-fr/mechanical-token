"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TicketToken = exports.EncodeTicketError = void 0;
var int_1 = require("./comparable/int");
var contract_1 = require("./contract");
var token_1 = require("./token");
var EncodeTicketError = /** @class */ (function () {
    function EncodeTicketError() {
        this.name = 'TicketEncodeError';
        this.message = 'Tickets cannot be sent to the blockchain; they are created on-chain';
    }
    return EncodeTicketError;
}());
exports.EncodeTicketError = EncodeTicketError;
var ticketerType = { "prim": "contract" };
var amountType = { "prim": "int" };
var TicketToken = /** @class */ (function (_super) {
    __extends(TicketToken, _super);
    function TicketToken(val, idx, fac) {
        var _this = _super.call(this, val, idx, fac) || this;
        _this.val = val;
        _this.idx = idx;
        _this.fac = fac;
        return _this;
    }
    Object.defineProperty(TicketToken.prototype, "valueToken", {
        get: function () {
            return this.createToken(this.val.args[0], this.idx);
        },
        enumerable: false,
        configurable: true
    });
    TicketToken.prototype.Encode = function (_args) {
        throw new EncodeTicketError();
    };
    TicketToken.prototype.EncodeObject = function (_args) {
        throw new EncodeTicketError();
    };
    TicketToken.prototype.Execute = function (val, semantics) {
        if (semantics && semantics[TicketToken.prim]) {
            return semantics[TicketToken.prim](val, this.val);
        }
        var ticketer = this.createToken(ticketerType, this.idx);
        var value = this.valueToken;
        var amount = this.createToken(amountType, this.idx);
        if (undefined === val.args[2] &&
            undefined !== val.args[1].args) {
            return {
                ticketer: ticketer.Execute(val.args[0], semantics),
                value: value.Execute(val.args[1].args[0], semantics),
                amount: amount.Execute(val.args[1].args[1], semantics)
            };
        }
        return {
            ticketer: ticketer.Execute(val.args[0], semantics),
            value: value.Execute(val.args[1], semantics),
            amount: amount.Execute(val.args[2], semantics)
        };
    };
    TicketToken.prototype.ExtractSchema = function () {
        return {
            ticketer: contract_1.ContractToken.prim,
            value: this.valueToken.ExtractSchema(),
            amount: int_1.IntToken.prim
        };
    };
    TicketToken.prototype.findAndReturnTokens = function (tokenToFind, tokens) {
        if (TicketToken.prim === tokenToFind) {
            tokens.push(this);
        }
        this.valueToken.findAndReturnTokens(tokenToFind, tokens);
        return tokens;
    };
    ;
    TicketToken.prim = 'ticket';
    return TicketToken;
}(token_1.Token));
exports.TicketToken = TicketToken;
//# sourceMappingURL=ticket.js.map