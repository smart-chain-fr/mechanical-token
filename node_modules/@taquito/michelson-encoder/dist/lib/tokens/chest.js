"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChestToken = exports.ChestValidationError = void 0;
var token_1 = require("./token");
var ChestValidationError = /** @class */ (function (_super) {
    __extends(ChestValidationError, _super);
    function ChestValidationError(value, token, message) {
        var _this = _super.call(this, value, token, message) || this;
        _this.value = value;
        _this.token = token;
        _this.name = 'ChestValidationError';
        return _this;
    }
    return ChestValidationError;
}(token_1.TokenValidationError));
exports.ChestValidationError = ChestValidationError;
var ChestToken = /** @class */ (function (_super) {
    __extends(ChestToken, _super);
    function ChestToken(val, idx, fac) {
        var _this = _super.call(this, val, idx, fac) || this;
        _this.val = val;
        _this.idx = idx;
        _this.fac = fac;
        return _this;
    }
    ChestToken.prototype.isValid = function (val) {
        if (/^[0-9a-fA-F]*$/.test(val) && val.length % 2 === 0) {
            return null;
        }
        else {
            return new ChestValidationError(val, this, "Invalid bytes: " + val);
        }
    };
    ChestToken.prototype.convertUint8ArrayToHexString = function (val) {
        return val.constructor === Uint8Array ? Buffer.from(val).toString('hex') : val;
    };
    ChestToken.prototype.Encode = function (args) {
        var val = args.pop();
        val = this.convertUint8ArrayToHexString(val);
        var err = this.isValid(val);
        if (err) {
            throw err;
        }
        return { bytes: val };
    };
    ChestToken.prototype.EncodeObject = function (val) {
        val = this.convertUint8ArrayToHexString(val);
        var err = this.isValid(val);
        if (err) {
            throw err;
        }
        return { bytes: val };
    };
    ChestToken.prototype.Execute = function (val) {
        return val.bytes;
    };
    ChestToken.prototype.ExtractSchema = function () {
        return ChestToken.prim;
    };
    ChestToken.prototype.findAndReturnTokens = function (tokenToFind, tokens) {
        if (ChestToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    };
    ;
    ChestToken.prim = 'chest';
    return ChestToken;
}(token_1.Token));
exports.ChestToken = ChestToken;
//# sourceMappingURL=chest.js.map