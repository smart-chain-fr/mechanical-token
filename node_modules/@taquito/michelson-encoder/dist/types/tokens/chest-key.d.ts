import { Token, TokenFactory, TokenValidationError } from './token';
export declare class ChestKeyValidationError extends TokenValidationError {
    value: any;
    token: ChestKeyToken;
    name: string;
    constructor(value: any, token: ChestKeyToken, message: string);
}
export declare class ChestKeyToken extends Token {
    protected val: {
        prim: string;
        args: any[];
        annots: any[];
    };
    protected idx: number;
    protected fac: TokenFactory;
    static prim: string;
    constructor(val: {
        prim: string;
        args: any[];
        annots: any[];
    }, idx: number, fac: TokenFactory);
    private isValid;
    private convertUint8ArrayToHexString;
    Encode(args: any[]): {
        bytes: any;
    };
    EncodeObject(val: string | Uint8Array): {
        bytes: string | Uint8Array;
    };
    Execute(val: any): string;
    ExtractSchema(): string;
    findAndReturnTokens(tokenToFind: string, tokens: Token[]): Token[];
}
