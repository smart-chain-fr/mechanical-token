import { HttpResponseError } from "@taquito/http-utils";
import { MichelsonV1Expression } from "@taquito/rpc";
export declare class InvalidParameterError implements Error {
    smartContractMethodName: string;
    sigs: any[];
    args: any[];
    name: string;
    message: string;
    constructor(smartContractMethodName: string, sigs: any[], args: any[]);
}
export declare class UndefinedLambdaContractError implements Error {
    name: string;
    message: string;
    constructor();
}
export declare class InvalidDelegationSource implements Error {
    source: string;
    name: string;
    message: string;
    constructor(source: string);
}
export declare class InvalidCodeParameter implements Error {
    message: string;
    readonly data: any;
    name: string;
    constructor(message: string, data: any);
}
export declare class InvalidInitParameter implements Error {
    message: string;
    readonly data: any;
    name: string;
    constructor(message: string, data: any);
}
export declare class InvalidViewParameterError implements Error {
    smartContractViewName: string;
    sigs: any;
    args: any;
    originalError: any;
    name: string;
    message: string;
    cause: any;
    constructor(smartContractViewName: string, sigs: any, args: any, originalError: any);
}
export declare class ViewSimulationError implements Error {
    message: string;
    originalError?: any;
    name: string;
    constructor(message: string, originalError?: any);
}
export declare const validateAndExtractFailwith: (error: HttpResponseError) => MichelsonV1Expression | undefined;
export declare class InvalidViewSimulationContext implements Error {
    info: string;
    name: string;
    message: string;
    constructor(info: string);
}
