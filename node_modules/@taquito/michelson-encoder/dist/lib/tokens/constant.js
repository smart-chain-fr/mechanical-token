"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalConstantToken = exports.GlobalConstantDecodingError = exports.GlobalConstantEncodingError = void 0;
var token_1 = require("./token");
var GlobalConstantEncodingError = /** @class */ (function (_super) {
    __extends(GlobalConstantEncodingError, _super);
    function GlobalConstantEncodingError(value, token, message) {
        var _this = _super.call(this, value, token, message) || this;
        _this.value = value;
        _this.token = token;
        _this.name = 'GlobalConstantEncodingError';
        return _this;
    }
    return GlobalConstantEncodingError;
}(token_1.TokenValidationError));
exports.GlobalConstantEncodingError = GlobalConstantEncodingError;
var GlobalConstantDecodingError = /** @class */ (function (_super) {
    __extends(GlobalConstantDecodingError, _super);
    function GlobalConstantDecodingError(value, token, message) {
        var _this = _super.call(this, value, token, message) || this;
        _this.value = value;
        _this.token = token;
        _this.name = 'GlobalConstantDecodingError';
        return _this;
    }
    return GlobalConstantDecodingError;
}(token_1.TokenValidationError));
exports.GlobalConstantDecodingError = GlobalConstantDecodingError;
var GlobalConstantToken = /** @class */ (function (_super) {
    __extends(GlobalConstantToken, _super);
    function GlobalConstantToken(val, idx, fac) {
        var _this = _super.call(this, val, idx, fac) || this;
        _this.val = val;
        _this.idx = idx;
        _this.fac = fac;
        return _this;
    }
    GlobalConstantToken.prototype.Execute = function (val, semantic) {
        if (semantic && semantic[GlobalConstantToken.prim]) {
            return semantic[GlobalConstantToken.prim](val, this.val);
        }
        else {
            throw new GlobalConstantDecodingError(val, this, "Unable to decode a value represented by a global constants. Please provide an expanded script to the Michelson-Encoder or semantics for the decoding. The following global constant hash was encountered: " + this.val.args[0]['string'] + ".");
        }
    };
    GlobalConstantToken.prototype.Encode = function (args) {
        throw new GlobalConstantEncodingError(args, this, "Unable to encode a script containing global constants. Please provide an expanded script to the Michelson-Encoder. The following global constant hash was encountered: " + this.val.args[0]['string'] + ".");
    };
    GlobalConstantToken.prototype.EncodeObject = function (val) {
        throw new GlobalConstantEncodingError(val, this, "Unable to encode a script containing global constants. Please provide an expanded script to the Michelson-Encoder. The following global constant hash was encountered: " + this.val.args[0]['string'] + ".");
    };
    GlobalConstantToken.prototype.ExtractSchema = function () {
        return GlobalConstantToken.prim;
    };
    GlobalConstantToken.prototype.findAndReturnTokens = function (tokenToFind, tokens) {
        if (GlobalConstantToken.prim === tokenToFind) {
            tokens.push(this);
        }
        return tokens;
    };
    ;
    GlobalConstantToken.prim = 'constant';
    return GlobalConstantToken;
}(token_1.Token));
exports.GlobalConstantToken = GlobalConstantToken;
//# sourceMappingURL=constant.js.map