"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnChainView = void 0;
var utils_1 = require("@taquito/utils");
var errors_1 = require("../errors");
var runCodeHelper = function (viewArgsType, viewReturnType, contractStorageType, viewInstructions, viewArgs, contractStorageValue, balance, chain_id, source, amount) {
    if (amount === void 0) { amount = '0'; }
    return {
        script: [
            { prim: 'parameter', args: [{ prim: 'pair', args: [viewArgsType, contractStorageType] }] },
            { prim: 'storage', args: [{ prim: 'option', args: [viewReturnType] }] },
            {
                prim: 'code',
                args: [
                    [
                        { prim: 'CAR' },
                        viewInstructions,
                        { prim: 'SOME' },
                        { prim: 'NIL', args: [{ prim: 'operation' }] },
                        { prim: 'PAIR' }
                    ]
                ]
            }
        ],
        storage: { prim: 'None' },
        input: { prim: 'Pair', args: [viewArgs, contractStorageValue] },
        amount: amount,
        balance: balance,
        chain_id: chain_id,
        source: source
    };
};
;
var OnChainView = /** @class */ (function () {
    function OnChainView(_rpc, _contractAddress, _smartContractViewSchema, _contractStorageType, _contractStorageValue, _args) {
        if (_args === void 0) { _args = "Unit"; }
        this._rpc = _rpc;
        this._contractAddress = _contractAddress;
        this._smartContractViewSchema = _smartContractViewSchema;
        this._contractStorageType = _contractStorageType;
        this._contractStorageValue = _contractStorageValue;
        this._args = _args;
    }
    /**
     * @description Get the signature of the smart contract view
     */
    OnChainView.prototype.getSignature = function () {
        return {
            parameter: this._smartContractViewSchema.extractArgsSchema(),
            result: this._smartContractViewSchema.extractResultSchema()
        };
    };
    /**
     * @description Get the result of the view simulation
     * @param executionContext.source the public key hash of the account who initialized this view execution.
     * @param executionContext.viewCaller the contract address which is the caller of view.
     */
    OnChainView.prototype.executeView = function (executionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var balance, chainId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.verifyContextExecution(executionContext);
                        return [4 /*yield*/, this._rpc.getBalance(this._contractAddress)];
                    case 1:
                        balance = (_a.sent()).toString();
                        return [4 /*yield*/, this._rpc.getChainId()];
                    case 2:
                        chainId = _a.sent();
                        return [2 /*return*/, this.executeViewAndDecodeResult(runCodeHelper(this._smartContractViewSchema.viewArgsType, this._smartContractViewSchema.viewReturnType, this._contractStorageType, this.adaptViewCodeToContext(this._smartContractViewSchema.instructions, executionContext.viewCaller, balance), this.transformArgsToMichelson(), this._contractStorageValue, balance, chainId, executionContext.source))];
                }
            });
        });
    };
    OnChainView.prototype.verifyContextExecution = function (executionContext) {
        if (executionContext.source && (utils_1.validateAddress(executionContext.source) !== utils_1.ValidationResult.VALID)) {
            throw new errors_1.InvalidViewSimulationContext("The source account who initialized the view execution is invalid: " + executionContext.source + ".");
        }
        if (!executionContext.viewCaller || (utils_1.validateAddress(executionContext.viewCaller) !== utils_1.ValidationResult.VALID)) {
            throw new errors_1.InvalidViewSimulationContext("The contract which is the caller of view is invalid: " + executionContext.viewCaller + ".");
        }
    };
    OnChainView.prototype.transformArgsToMichelson = function () {
        try {
            return this._smartContractViewSchema.encodeViewArgs(this._args);
        }
        catch (error) {
            throw new errors_1.InvalidViewParameterError(this._smartContractViewSchema.viewName, this.getSignature(), this._args, error);
        }
    };
    /**
     * @description Loops through the view's instructions and replace BALANCE, SENDER, SELF_ADDRESS and AMOUNT with Michelson expressions that match the current context, if applicable.
     *
     * Certain specific instructions have different semantics in view:
     * BALANCE represents the current amount of mutez held by the contract where view is;
     * SENDER represents the contract which is the caller of view;
     * SELF_ADDRESS represents the contract where view is;
     * AMOUNT is always 0 mutez.
     *
     */
    OnChainView.prototype.adaptViewCodeToContext = function (instructions, viewCaller, contractBalance) {
        var _this = this;
        var instructionsToReplace = {
            BALANCE: [{ prim: 'PUSH', args: [{ prim: 'mutez' }, { int: contractBalance }] }],
            SENDER: [
                { prim: 'PUSH', args: [{ prim: 'address' }, { string: viewCaller }] }
            ],
            SELF_ADDRESS: [
                { prim: 'PUSH', args: [{ prim: 'address' }, { string: this._contractAddress }] }
            ],
            AMOUNT: [{ prim: 'PUSH', args: [{ prim: 'mutez' }, { int: '0' }] }]
        };
        instructions.forEach(function (inst, i) {
            if (inst.prim in instructionsToReplace) {
                instructions[i] = Object(instructionsToReplace)[inst.prim];
            }
            if (inst.args && inst.args.length !== 0) {
                _this.adaptViewCodeToContext(inst.args, viewCaller, contractBalance);
            }
            else if (Array.isArray(inst)) {
                _this.adaptViewCodeToContext(inst, viewCaller, contractBalance);
            }
        });
        return instructions;
    };
    OnChainView.prototype.executeViewAndDecodeResult = function (viewScript) {
        return __awaiter(this, void 0, void 0, function () {
            var storage, error_1, failWith;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this._rpc.runCode(viewScript)];
                    case 1:
                        storage = (_a.sent()).storage;
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _a.sent();
                        failWith = errors_1.validateAndExtractFailwith(error_1);
                        throw failWith ? new errors_1.ViewSimulationError("The simulation of the on-chain view named " + this._smartContractViewSchema.viewName + " failed with: " + JSON.stringify(failWith), error_1) : error_1;
                    case 3:
                        if (!storage.args) {
                            throw new errors_1.ViewSimulationError("View simulation failed with an invalid result: " + storage);
                        }
                        return [2 /*return*/, this._smartContractViewSchema.decodeViewResult(storage.args[0])];
                }
            });
        });
    };
    return OnChainView;
}());
exports.OnChainView = OnChainView;
//# sourceMappingURL=contract-on-chain-view.js.map